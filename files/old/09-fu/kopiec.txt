#include <algorithm>
#include <iostream>
#include <queue>

using namespace std;

typedef struct { int x, y; } Point;

ostream &operator<<(ostream &os, const Point &p) {
  os << "(" << p.x << "," << p.y << ")";
  return os;
}

#define CASE 3

#if CASE == 1
// Sort po x
bool operator<(const Point &p1, const Point &p2) { return p1.x > p2.x; }

priority_queue<Point> pq;

#elif CASE == 2
// Sort po y
auto cmp = [](const Point &p1, const Point &p2) -> bool { return p1.y > p2.y; };

priority_queue<Point, std::vector<Point>, decltype(cmp)> pq(cmp);

#elif CASE == 3
// Sort po x + y
class cmp {
public: // Jak bedzie prywatny lub protected to kopiec go nie widzi ;),
        // domyÅ›lnie jest private
  bool operator()(const Point &p1, const Point &p2) {
    return p1.x + p1.y > p2.x + p2.y;
  }
};

priority_queue<Point, std::vector<Point>, cmp> pq;

#endif

int main() {
  pq.push({1, 0});
  pq.push({2, 3});
  pq.push({-5, 7});

  while (!pq.empty()) {
    cout << pq.top();
    pq.pop();
  }
}
